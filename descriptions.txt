Desc : *
End : Desc
Arg : (A : *) -> (A -> Desc) -> Desc
Rec : (A : *) -> Desc -> Desc

interp : Desc -> * -> *
interp End X = U
interp (Arg A f) X = (x : A) ** interp (f x)
interp (Rec A d) X = (A -> X) ** interp d

Data : Desc -> *
Con : (d : Desc) -> interp d (Data d) -> Data d

ind :
  (d : Desc)
  -> (P : Data d -> *)
  -> (
    (y : interp d (Data d))
    -> All d (Data d) P y
    -> P (Con d y)
  )
  -> (x : Data d)
  -> P x
ind d P i (Con _ c) = i c (all d (Data d) P (id d P i) c)

E3 = (b : Bool) ** elimB {\_. *} Unit Bool b
E3i0 = (False, ())
E3i1 = (True, False)
E3i2 = (True, True)

elimE3 : (P : E3 -> *) -> P E3i0 -> P E3i1 -> P E3i2 -> (e : E3) -> P e
  = \P p0 p1 p2 e. elimB (\b. P (b, e.snd)) p0 (elimB (\b. P (True, b)) p1 p2 x.snd) x.fst

All : (d : Desc) -> (X : *) -> (P : X -> *) -> (xs : interp d X) -> *
All End X P () = U
All (Arg A f) X P (x, y) = All (f x) X P y
All (Rec A d) X P (f, y) = ((x : A) -> P (f x)) ** All d X P y

all : (d : Desc) -> (X : *) -> (P : X -> *) -> ((x : X) -> P x) -> (xs : interp d X) -> All d X P xs
all End X P p () = ()
all (Arg A f) X P p (x, y) = all (f x) X P p y
all (Rec A d) X P p (f, y) = (\(h : A). p (f h), all d X P p y)

Desc = Data DescD
DescD = Arg E3 \e. elimE3 (\_. Desc) End (Arg * \A. Rec A End) (Arg * \_. Rec U End) e
End = ((False, ()), ())
Arg A f = ((True, False), A, f)
Rec A d = ((True, True), A, d)
